{
    "docs": [
        {
            "location": "/", 
            "text": "TERMIOS", 
            "title": "Home"
        }, 
        {
            "location": "/#termios", 
            "text": "", 
            "title": "TERMIOS"
        }, 
        {
            "location": "/usage/", 
            "text": "Usage\n\n\n\n\nAPI\n\n\n#\n\n\nTERMIOS.cfgetispeed\n \n \nMethod\n.\n\n\ncfgetispeed\n(\nterm\n::\ntermios\n)\n::\nInt\n\n\n\n\n\n\nReturns the input baud rate stored in the termios structure.\n\n\nsource\n\n\n#\n\n\nTERMIOS.cfgetospeed\n \n \nMethod\n.\n\n\ncfgetospeed\n(\nterm\n::\ntermios\n)\n::\nInt\n\n\n\n\n\n\nReturns the output baud rate stored in the termios structure.\n\n\nsource\n\n\n#\n\n\nTERMIOS.cfmakeraw\n \n \nMethod\n.\n\n\ncfmakeraw\n(\nterm\n::\ntermios\n)\n\n\n\n\n\n\nSet the terminal to something like the \"raw\" mode of the old Version 7 terminal driver: input is available character by character, echoing is disabled, and all special processing of terminal input and output characters is disabled. The terminal attributes are set as follows:\n\n\nterm.c\niflag \n= ~(IGNBRK | BRKINT | PARMRK | ISTRIP              | INLCR | IGNCR | ICRNL | IXON); term.c\noflag \n= ~OPOST; term.c\nlflag \n= ~(ECHO | ECHONL | ICANON | ISIG | IEXTEN); term.c\ncflag \n= ~(CSIZE | PARENB); term.c_cflag |= CS8;\n\n\nsource\n\n\n#\n\n\nTERMIOS.cfsetispeed\n \n \nMethod\n.\n\n\ncfsetispeed\n(\nterm\n::\ntermios\n,\n \nspeed\n::\nInt\n)\n\n\n\n\n\n\nsets the input baud rate stored in the termios structure to speed, which must be one of these constants:\n\n\n\n\nB0\n\n\nB50\n\n\nB75\n\n\nB110\n\n\nB134\n\n\nB150\n\n\nB200\n\n\nB300\n\n\nB600\n\n\nB1200\n\n\nB1800\n\n\nB2400\n\n\nB4800\n\n\nB9600\n\n\nB19200\n\n\nB38400\n\n\nB57600\n\n\nB115200\n\n\nB230400\n\n\n\n\nThe zero baud rate, B0, is used to terminate the connection. If B0 is specified, the modem control lines shall no longer be asserted. Normally, this will disconnect the line. CBAUDEX is a mask for the speeds beyond those defined in POSIX.1 (57600 and above). Thus, B57600 \n CBAUDEX is nonzero.\n\n\nsource\n\n\n#\n\n\nTERMIOS.cfsetospeed\n \n \nMethod\n.\n\n\ncfsetospeed\n(\nterm\n::\ntermios\n,\n \nspeed\n::\nInt\n)\n\n\n\n\n\n\nsets the output baud rate stored in the termios structure to speed, which must be one of these constants:\n\n\n\n\nB0\n\n\nB50\n\n\nB75\n\n\nB110\n\n\nB134\n\n\nB150\n\n\nB200\n\n\nB300\n\n\nB600\n\n\nB1200\n\n\nB1800\n\n\nB2400\n\n\nB4800\n\n\nB9600\n\n\nB19200\n\n\nB38400\n\n\nB57600\n\n\nB115200\n\n\nB230400\n\n\n\n\nThe zero baud rate, B0, is used to terminate the connection. If B0 is specified, the modem control lines shall no longer be asserted. Normally, this will disconnect the line. CBAUDEX is a mask for the speeds beyond those defined in POSIX.1 (57600 and above). Thus, B57600 \n CBAUDEX is nonzero.\n\n\nsource\n\n\n#\n\n\nTERMIOS.cfsetspeed\n \n \nMethod\n.\n\n\ncfsetspeed\n(\nterm\n::\ntermios\n,\n \nspeed\n::\nInt\n)\n\n\n\n\n\n\nis a 4.4BSD extension. It takes the same arguments as cfsetispeed(), and sets both input and output speed.\n\n\nsource\n\n\n#\n\n\nTERMIOS.tcdrain\n \n \nMethod\n.\n\n\ntcdrain\n(\nfd\n)\n\n\n\n\n\n\nWait until all output written to file descriptor fd has been transmitted.\n\n\nsource\n\n\n#\n\n\nTERMIOS.tcflow\n \n \nMethod\n.\n\n\ntcflow\n(\nfd\n,\n \naction\n)\n\n\n\n\n\n\nSuspend transmission or reception of data on the object referred to by fd, depending on the value of action:\n\n\n\n\ntermios.TCOOFF to suspend output,\n\n\ntermios.TCOON to restart output\n\n\ntermios.TCIOFF to suspend input,\n\n\ntermios.TCION to restart input.\n\n\n\n\nsource\n\n\n#\n\n\nTERMIOS.tcflush\n \n \nMethod\n.\n\n\ntcflush\n(\nfd\n,\n \nqueue\n)\n\n\n\n\n\n\nDiscard data written to the object referred to by fd but not transmitted, or data received but not read, depending on the value of queue_selector:\n\n\n\n\ntermios.TCIFLUSH flushes data received but not read.\n\n\ntermios.TCOFLUSH flushes data written but not transmitted.\n\n\ntermios.TCIOFLUSH flushes both data received but not read, and data written but not transmitted.\n\n\n\n\nsource\n\n\n#\n\n\nTERMIOS.tcgetattr\n \n \nMethod\n.\n\n\ntcgetattr\n(\nfd\n::\nRawFD\n,\n \nterm\n::\ntermios\n)\n\n\ntcgetattr\n(\ns\n::\nBase\n.\nLibuvStream\n,\n \nterm\n::\ntermios\n)\n\n\ntcgetattr\n(\nf\n::\nInt\n,\n \nterm\n::\ntermios\n)\n\n\n\n\n\n\nGet the tty attributes for file descriptor fd\n\n\nsource\n\n\n#\n\n\nTERMIOS.tcsendbreak\n \n \nMethod\n.\n\n\ntcsendbreak\n(\ns\n::\nBase\n.\nLibuvStream\n,\n \nduration\n::\nInt\n)\n\n\n\n\n\n\nTransmit a continuous stream of zero-valued bits for a specific duration, if the terminal is using asynchronous serial data transmission. If duration is zero, it transmits zero-valued bits for at least 0.25 seconds, and not more that 0.5 seconds. If duration is not zero, it sends zero-valued bits for some implementation-defined length of time.\n\n\nIf the terminal is not using asynchronous serial data transmission, tcsendbreak() returns without taking any action.\n\n\nsource\n\n\n#\n\n\nTERMIOS.tcsetattr\n \n \nMethod\n.\n\n\ntcsetattr\n(\nfd\n,\n \nwhen\n,\n \nattributes\n)\n\n\n\n\n\n\nSet the tty attributes for file descriptor fd. The when argument determines when the attributes are changed:\n\n\n\n\ntermios.TCSANOW to change immediately\n\n\ntermios.TCSADRAIN to change after transmitting all queued output\n\n\ntermios.TCSAFLUSH to change after transmitting all queued output and discarding all queued input.\n\n\n\n\nsource", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/usage/#api", 
            "text": "#  TERMIOS.cfgetispeed     Method .  cfgetispeed ( term :: termios ) :: Int   Returns the input baud rate stored in the termios structure.  source  #  TERMIOS.cfgetospeed     Method .  cfgetospeed ( term :: termios ) :: Int   Returns the output baud rate stored in the termios structure.  source  #  TERMIOS.cfmakeraw     Method .  cfmakeraw ( term :: termios )   Set the terminal to something like the \"raw\" mode of the old Version 7 terminal driver: input is available character by character, echoing is disabled, and all special processing of terminal input and output characters is disabled. The terminal attributes are set as follows:  term.c iflag  = ~(IGNBRK | BRKINT | PARMRK | ISTRIP              | INLCR | IGNCR | ICRNL | IXON); term.c oflag  = ~OPOST; term.c lflag  = ~(ECHO | ECHONL | ICANON | ISIG | IEXTEN); term.c cflag  = ~(CSIZE | PARENB); term.c_cflag |= CS8;  source  #  TERMIOS.cfsetispeed     Method .  cfsetispeed ( term :: termios ,   speed :: Int )   sets the input baud rate stored in the termios structure to speed, which must be one of these constants:   B0  B50  B75  B110  B134  B150  B200  B300  B600  B1200  B1800  B2400  B4800  B9600  B19200  B38400  B57600  B115200  B230400   The zero baud rate, B0, is used to terminate the connection. If B0 is specified, the modem control lines shall no longer be asserted. Normally, this will disconnect the line. CBAUDEX is a mask for the speeds beyond those defined in POSIX.1 (57600 and above). Thus, B57600   CBAUDEX is nonzero.  source  #  TERMIOS.cfsetospeed     Method .  cfsetospeed ( term :: termios ,   speed :: Int )   sets the output baud rate stored in the termios structure to speed, which must be one of these constants:   B0  B50  B75  B110  B134  B150  B200  B300  B600  B1200  B1800  B2400  B4800  B9600  B19200  B38400  B57600  B115200  B230400   The zero baud rate, B0, is used to terminate the connection. If B0 is specified, the modem control lines shall no longer be asserted. Normally, this will disconnect the line. CBAUDEX is a mask for the speeds beyond those defined in POSIX.1 (57600 and above). Thus, B57600   CBAUDEX is nonzero.  source  #  TERMIOS.cfsetspeed     Method .  cfsetspeed ( term :: termios ,   speed :: Int )   is a 4.4BSD extension. It takes the same arguments as cfsetispeed(), and sets both input and output speed.  source  #  TERMIOS.tcdrain     Method .  tcdrain ( fd )   Wait until all output written to file descriptor fd has been transmitted.  source  #  TERMIOS.tcflow     Method .  tcflow ( fd ,   action )   Suspend transmission or reception of data on the object referred to by fd, depending on the value of action:   termios.TCOOFF to suspend output,  termios.TCOON to restart output  termios.TCIOFF to suspend input,  termios.TCION to restart input.   source  #  TERMIOS.tcflush     Method .  tcflush ( fd ,   queue )   Discard data written to the object referred to by fd but not transmitted, or data received but not read, depending on the value of queue_selector:   termios.TCIFLUSH flushes data received but not read.  termios.TCOFLUSH flushes data written but not transmitted.  termios.TCIOFLUSH flushes both data received but not read, and data written but not transmitted.   source  #  TERMIOS.tcgetattr     Method .  tcgetattr ( fd :: RawFD ,   term :: termios )  tcgetattr ( s :: Base . LibuvStream ,   term :: termios )  tcgetattr ( f :: Int ,   term :: termios )   Get the tty attributes for file descriptor fd  source  #  TERMIOS.tcsendbreak     Method .  tcsendbreak ( s :: Base . LibuvStream ,   duration :: Int )   Transmit a continuous stream of zero-valued bits for a specific duration, if the terminal is using asynchronous serial data transmission. If duration is zero, it transmits zero-valued bits for at least 0.25 seconds, and not more that 0.5 seconds. If duration is not zero, it sends zero-valued bits for some implementation-defined length of time.  If the terminal is not using asynchronous serial data transmission, tcsendbreak() returns without taking any action.  source  #  TERMIOS.tcsetattr     Method .  tcsetattr ( fd ,   when ,   attributes )   Set the tty attributes for file descriptor fd. The when argument determines when the attributes are changed:   termios.TCSANOW to change immediately  termios.TCSADRAIN to change after transmitting all queued output  termios.TCSAFLUSH to change after transmitting all queued output and discarding all queued input.   source", 
            "title": "API"
        }
    ]
}